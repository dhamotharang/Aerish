// <auto-generated />
using System;
using Aerish.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Aerish.DbMigration.SqlServer.Migrations
{
    [DbContext(typeof(AerishDbContext))]
    [Migration("20210501174114_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.MasterEmployee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<short>("CalcID")
                        .HasColumnType("smallint");

                    b.Property<short>("PlanYear")
                        .HasColumnType("smallint");

                    b.Property<short>("PayRunID")
                        .HasColumnType("smallint");

                    b.Property<byte?>("BasicPayBasis")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("DailyRate")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("DaysFactor")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("MonthlyRate")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("NetSalary")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("NetTaxableIncome")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<string>("RecordStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("TotalDeduction")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("TotalNonTaxableIncome")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("TotalTaxableIncome")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("WitholdingTax")
                        .HasColumnType("DECIMAL(20,6)");

                    b.HasKey("EmployeeID", "ClientID", "CalcID", "PlanYear", "PayRunID");

                    b.HasIndex("ClientID", "PayRunID", "PlanYear");

                    b.ToTable("tbl_MasterEmployee", "cd");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.MasterEmployeeDeduction", b =>
                {
                    b.Property<int>("MasterEmployeeDeductionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CalcID")
                        .HasColumnType("smallint");

                    b.Property<short>("PlanYear")
                        .HasColumnType("smallint");

                    b.Property<short>("PayRunID")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<short>("DeductionID")
                        .HasColumnType("smallint");

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("EmployeeAmount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal>("EmployerAmount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RecordStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MasterEmployeeDeductionID", "CalcID", "PlanYear", "PayRunID", "EmployeeID", "DeductionID", "ClientID");

                    b.HasIndex("DeductionID");

                    b.HasIndex("ClientID", "PayRunID", "PlanYear");

                    b.HasIndex("EmployeeID", "ClientID", "CalcID", "PlanYear", "PayRunID");

                    b.ToTable("tbl_MasterEmployeeDeduction", "cd");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.MasterEmployeeEarning", b =>
                {
                    b.Property<int>("MasterEmployeeEarningID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CalcID")
                        .HasColumnType("smallint");

                    b.Property<short>("PlanYear")
                        .HasColumnType("smallint");

                    b.Property<short>("PayRunID")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<short>("EarningID")
                        .HasColumnType("smallint");

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<byte>("AmountBasis")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ComputedBy")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("ComputedByValue")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<bool>("IsAdjustIfAbsent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComputed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeMinimis")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNegativeComputation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartOfBasicPay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceivable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxable")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RecordStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MasterEmployeeEarningID", "CalcID", "PlanYear", "PayRunID", "EmployeeID", "EarningID", "ClientID");

                    b.HasIndex("EarningID");

                    b.HasIndex("ClientID", "PayRunID", "PlanYear");

                    b.HasIndex("EmployeeID", "ClientID", "CalcID", "PlanYear", "PayRunID");

                    b.ToTable("tbl_MasterEmployeeEarning", "cd");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.MasterEmployeeLoan", b =>
                {
                    b.Property<int>("MasterEmployeeLoanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CalcID")
                        .HasColumnType("smallint");

                    b.Property<short>("PlanYear")
                        .HasColumnType("smallint");

                    b.Property<short>("PayRunID")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<short>("LoanID")
                        .HasColumnType("smallint");

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RecordStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MasterEmployeeLoanID", "CalcID", "PlanYear", "PayRunID", "EmployeeID", "LoanID", "ClientID");

                    b.HasIndex("LoanID");

                    b.HasIndex("ClientID", "PayRunID", "PlanYear");

                    b.HasIndex("EmployeeID", "ClientID", "CalcID", "PlanYear", "PayRunID");

                    b.ToTable("tbl_MasterEmployeeLoan", "cd");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.SpecialGroup", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupID");

                    b.ToTable("tbl_SpecialGroup", "cd");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.SpecialGroupMember", b =>
                {
                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.HasKey("GroupID", "EmployeeID");

                    b.ToTable("tbl_SpecialGroupMember", "cd");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Bank", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbl_Bank", "dbo");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Batch", b =>
                {
                    b.Property<int>("BatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FileID")
                        .HasColumnType("int");

                    b.Property<int?>("N_FileFileID")
                        .HasColumnType("int");

                    b.HasKey("BatchID");

                    b.HasIndex("N_FileFileID");

                    b.ToTable("tbl_Batch", "dbo");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Client", b =>
                {
                    b.Property<short>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ClientID");

                    b.ToTable("tbl_Client", "cdm");

                    b.HasData(
                        new
                        {
                            ClientID = (short)1,
                            Name = "Aerish Inc."
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Deduction", b =>
                {
                    b.Property<short>("DeductionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("DeductionTypeID")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludedInTax")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TaskHandlerProviderID")
                        .HasColumnType("int");

                    b.HasKey("DeductionID");

                    b.HasIndex("DeductionTypeID");

                    b.HasIndex("TaskHandlerProviderID");

                    b.HasIndex("Code", "ClientID", "IsEnabled");

                    b.ToTable("tbl_Deduction", "dbo");

                    b.HasData(
                        new
                        {
                            DeductionID = (short)1,
                            ClientID = (short)1,
                            Code = "CA",
                            DeductionTypeID = (short)1,
                            IsEnabled = false,
                            IsExcludedInTax = false,
                            LongDesc = "Cash Advance",
                            ShortDesc = "Cash Advance",
                            TaskHandlerProviderID = 201
                        },
                        new
                        {
                            DeductionID = (short)2,
                            ClientID = (short)1,
                            Code = "SSS",
                            DeductionTypeID = (short)2,
                            IsEnabled = true,
                            IsExcludedInTax = true,
                            LongDesc = "SSS Contribution",
                            ShortDesc = "SSS Contribution",
                            TaskHandlerProviderID = 300
                        },
                        new
                        {
                            DeductionID = (short)3,
                            ClientID = (short)1,
                            Code = "PagIBIG",
                            DeductionTypeID = (short)2,
                            IsEnabled = true,
                            IsExcludedInTax = true,
                            LongDesc = "Pag-IBIG Contribution",
                            ShortDesc = "Pag-IBIG Contribution",
                            TaskHandlerProviderID = 301
                        },
                        new
                        {
                            DeductionID = (short)4,
                            ClientID = (short)1,
                            Code = "PhilHealth",
                            DeductionTypeID = (short)2,
                            IsEnabled = true,
                            IsExcludedInTax = true,
                            LongDesc = "PhilHealth Contribution",
                            ShortDesc = "PhilHealth Contribution",
                            TaskHandlerProviderID = 302
                        },
                        new
                        {
                            DeductionID = (short)9,
                            ClientID = (short)1,
                            Code = "Others",
                            DeductionTypeID = (short)1,
                            IsEnabled = true,
                            IsExcludedInTax = true,
                            LongDesc = "Others",
                            ShortDesc = "Others",
                            TaskHandlerProviderID = 202
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.DeductionType", b =>
                {
                    b.Property<short>("DeductionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DeductionTypeID");

                    b.ToTable("tbl_DeductionType", "dbo");

                    b.HasData(
                        new
                        {
                            DeductionTypeID = (short)1,
                            LongDesc = "Normal",
                            ShortDesc = "Normal"
                        },
                        new
                        {
                            DeductionTypeID = (short)2,
                            LongDesc = "Contribution",
                            ShortDesc = "Contribution"
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Earning", b =>
                {
                    b.Property<short>("EarningID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ComputedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short>("EarningTypeID")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsAdjustIfAbsent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComputed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeMinimis")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNegativeComputation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartOfBasicPay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceivable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxable")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TaskHandlerProviderID")
                        .HasColumnType("int");

                    b.HasKey("EarningID");

                    b.HasIndex("EarningTypeID");

                    b.HasIndex("TaskHandlerProviderID");

                    b.HasIndex("Code", "ClientID", "IsEnabled");

                    b.ToTable("tbl_Earning", "dbo");

                    b.HasData(
                        new
                        {
                            EarningID = (short)1,
                            ClientID = (short)1,
                            Code = "BasicPay",
                            EarningTypeID = (short)1,
                            IsAdjustIfAbsent = false,
                            IsComputed = false,
                            IsDeMinimis = false,
                            IsEnabled = true,
                            IsNegativeComputation = false,
                            IsPartOfBasicPay = false,
                            IsReceivable = true,
                            IsTaxable = true,
                            LongDesc = "Basic Pay",
                            ShortDesc = "Basic Pay",
                            TaskHandlerProviderID = 100
                        },
                        new
                        {
                            EarningID = (short)2,
                            ClientID = (short)1,
                            Code = "Absent",
                            ComputedBy = "Hour",
                            EarningTypeID = (short)3,
                            IsAdjustIfAbsent = true,
                            IsComputed = true,
                            IsDeMinimis = false,
                            IsEnabled = false,
                            IsNegativeComputation = true,
                            IsPartOfBasicPay = true,
                            IsReceivable = false,
                            IsTaxable = true,
                            LongDesc = "Absent",
                            ShortDesc = "Absent"
                        },
                        new
                        {
                            EarningID = (short)3,
                            ClientID = (short)1,
                            Code = "InternetAllowance",
                            EarningTypeID = (short)2,
                            IsAdjustIfAbsent = false,
                            IsComputed = false,
                            IsDeMinimis = true,
                            IsEnabled = true,
                            IsNegativeComputation = false,
                            IsPartOfBasicPay = false,
                            IsReceivable = true,
                            IsTaxable = true,
                            LongDesc = "Internet Allowance",
                            ShortDesc = "Internet Allowance",
                            TaskHandlerProviderID = 101
                        },
                        new
                        {
                            EarningID = (short)4,
                            ClientID = (short)1,
                            Code = "ShiftAllowance",
                            EarningTypeID = (short)2,
                            IsAdjustIfAbsent = false,
                            IsComputed = false,
                            IsDeMinimis = true,
                            IsEnabled = true,
                            IsNegativeComputation = false,
                            IsPartOfBasicPay = false,
                            IsReceivable = true,
                            IsTaxable = true,
                            LongDesc = "Shift Allowance",
                            ShortDesc = "Shift Allowance",
                            TaskHandlerProviderID = 101
                        },
                        new
                        {
                            EarningID = (short)5,
                            ClientID = (short)1,
                            Code = "RiceAllowance",
                            EarningTypeID = (short)2,
                            IsAdjustIfAbsent = false,
                            IsComputed = false,
                            IsDeMinimis = false,
                            IsEnabled = true,
                            IsNegativeComputation = false,
                            IsPartOfBasicPay = false,
                            IsReceivable = true,
                            IsTaxable = false,
                            LongDesc = "Rice Allowance",
                            ShortDesc = "Rice Allowance",
                            TaskHandlerProviderID = 101
                        },
                        new
                        {
                            EarningID = (short)6,
                            ClientID = (short)1,
                            Code = "ClothingAllowance",
                            EarningTypeID = (short)2,
                            IsAdjustIfAbsent = false,
                            IsComputed = false,
                            IsDeMinimis = false,
                            IsEnabled = true,
                            IsNegativeComputation = false,
                            IsPartOfBasicPay = false,
                            IsReceivable = true,
                            IsTaxable = false,
                            LongDesc = "Clothing Allowance",
                            ShortDesc = "Clothing Allowance",
                            TaskHandlerProviderID = 101
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.EarningType", b =>
                {
                    b.Property<short>("EarningTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EarningTypeID");

                    b.ToTable("tbl_EarningType", "dbo");

                    b.HasData(
                        new
                        {
                            EarningTypeID = (short)1,
                            LongDesc = "Basic Pay",
                            ShortDesc = "Basic Pay"
                        },
                        new
                        {
                            EarningTypeID = (short)2,
                            LongDesc = "Allowance",
                            ShortDesc = "Allowance"
                        },
                        new
                        {
                            EarningTypeID = (short)3,
                            LongDesc = "Absence",
                            ShortDesc = "Absence"
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeID", "ClientID");

                    b.HasIndex("ClientID", "Code", "EmployeeID")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("tbl_Employee", "dbo");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Loan", b =>
                {
                    b.Property<short>("LoanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<short>("LoanTypeID")
                        .HasColumnType("smallint");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TaskHandlerProviderID")
                        .HasColumnType("int");

                    b.HasKey("LoanID");

                    b.HasIndex("LoanTypeID");

                    b.HasIndex("TaskHandlerProviderID");

                    b.HasIndex("Code", "ClientID", "IsEnabled");

                    b.ToTable("tbl_Loan", "dbo");

                    b.HasData(
                        new
                        {
                            LoanID = (short)1,
                            ClientID = (short)1,
                            Code = "HMOPremiumPayable",
                            IsEnabled = true,
                            LoanTypeID = (short)1,
                            LongDesc = "HMO Premium Payable",
                            ShortDesc = "HMO Premium Payable",
                            TaskHandlerProviderID = 401
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.LoanType", b =>
                {
                    b.Property<short>("LoanTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LoanTypeID");

                    b.ToTable("tbl_LoanType", "dbo");

                    b.HasData(
                        new
                        {
                            LoanTypeID = (short)1,
                            LongDesc = "Company Loan",
                            ShortDesc = "Company Loan"
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Lookup", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AltDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Type", "Code");

                    b.ToTable("tbl_Lookup", "dbo");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.OTRate", b =>
                {
                    b.Property<short>("OTRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("ComputedBy")
                        .HasColumnType("tinyint");

                    b.Property<short>("OTRateTypeID")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Rate")
                        .HasColumnType("DECIMAL(20,6)");

                    b.HasKey("OTRateID");

                    b.HasIndex("OTRateTypeID");

                    b.ToTable("tbl_OTRate", "pr");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.OTRateType", b =>
                {
                    b.Property<short>("OTRateTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OTRateTypeID");

                    b.ToTable("tbl_OTRateType", "pr");

                    b.HasData(
                        new
                        {
                            OTRateTypeID = (short)1,
                            LongDesc = "Night Differential",
                            ShortDesc = "Night Differential"
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeSysID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxIdNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("PersonID");

                    b.ToTable("tbl_Person", "cdm");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.ProcessInstance", b =>
                {
                    b.Property<int>("ProcessInstanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<short>("JobID")
                        .HasColumnType("smallint");

                    b.Property<byte>("JobStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ProcessInstanceID");

                    b.HasIndex("ClientID", "JobID");

                    b.ToTable("tbl_ProcessInstance", "dbo");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.ProcessInstanceError", b =>
                {
                    b.Property<int>("JobErrorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessInstanceID")
                        .HasColumnType("int");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobErrorID");

                    b.HasIndex("ProcessInstanceID");

                    b.ToTable("tbl_ProcessInstanceError", "dbo");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.ProcessInstanceMessage", b =>
                {
                    b.Property<int>("JobMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessInstanceID")
                        .HasColumnType("int");

                    b.HasKey("JobMessageID");

                    b.HasIndex("ProcessInstanceID");

                    b.ToTable("tbl_ProcessInstanceMessage", "dbo");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.ProcessInstanceParameter", b =>
                {
                    b.Property<int>("ProcessInstanceParameterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessInstanceID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProcessInstanceParameterID");

                    b.HasIndex("ProcessInstanceID");

                    b.ToTable("tbl_ProcessInstanceParameter", "dbo");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.TaskHandlerProvider", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("HandlerAssembly")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HandlerClass")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TaskAssembly")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TaskClass")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("ID");

                    b.ToTable("tbl_TaskHandlerProvider", "dbo");

                    b.HasData(
                        new
                        {
                            ID = 100,
                            TaskAssembly = "Aerish, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "Aerish.Commands.CalcCmds.CalcBasicPayCmd"
                        },
                        new
                        {
                            ID = 101,
                            TaskAssembly = "Aerish, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "Aerish.Commands.EarningCmds.Earnings.CalcEmployeeEarningCmd"
                        },
                        new
                        {
                            ID = 201,
                            TaskAssembly = "Aerish, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "Aerish.Commands.DeductionCmds.Deductions.CashAdvanceDeductionCmd"
                        },
                        new
                        {
                            ID = 202,
                            TaskAssembly = "Aerish, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "Aerish.Commands.DeductionCmds.Deductions.OtherDeductionCmd"
                        },
                        new
                        {
                            ID = 300,
                            HandlerAssembly = "Aerish.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            HandlerClass = "Aerish.Application.Commands.DeductionCmds.Contributions.SSSContributionDeductionCmdHandler",
                            TaskAssembly = "Aerish, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "Aerish.Commands.DeductionCmds.Contributions.ContributionDeductionCmd"
                        },
                        new
                        {
                            ID = 301,
                            HandlerAssembly = "Aerish.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            HandlerClass = "Aerish.Application.Commands.DeductionCmds.Contributions.PagIBIGContributionDeductionCmdHandler",
                            TaskAssembly = "Aerish, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "Aerish.Commands.DeductionCmds.Contributions.ContributionDeductionCmd"
                        },
                        new
                        {
                            ID = 302,
                            HandlerAssembly = "Aerish.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            HandlerClass = "Aerish.Application.Commands.DeductionCmds.Contributions.PhilHealthContributionDeductionCmdHandler",
                            TaskAssembly = "Aerish, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "Aerish.Commands.DeductionCmds.Contributions.ContributionDeductionCmd"
                        },
                        new
                        {
                            ID = 1000,
                            TaskAssembly = "Aerish, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "Aerish.Commands.CalcCmds.MainCalcCmd"
                        },
                        new
                        {
                            ID = 1001,
                            TaskAssembly = "Aerish, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "Aerish.Commands.RollbackEmployeeCmd"
                        },
                        new
                        {
                            ID = 2000,
                            TaskAssembly = "Aerish, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "Aerish.Imports.Commands.ImportPersonCmd"
                        },
                        new
                        {
                            ID = 401,
                            TaskAssembly = "Aerish, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            TaskClass = "Aerish.Commands.LoanCmds.CompanyLoans.HMOPremiumPayableLoanCmd"
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.BasicPay", b =>
                {
                    b.Property<int>("BasicPayID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<string>("AmountBasis")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Effectivity")
                        .HasColumnType("datetime2");

                    b.Property<short?>("PeriodEndID")
                        .HasColumnType("smallint");

                    b.Property<short>("PeriodStartID")
                        .HasColumnType("smallint");

                    b.HasKey("BasicPayID", "EmployeeID", "ClientID");

                    b.HasIndex("PeriodEndID");

                    b.HasIndex("PeriodStartID");

                    b.HasIndex("EmployeeID", "ClientID");

                    b.ToTable("tbl_BasicPay", "pr");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeDeduction", b =>
                {
                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeeDeductionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<short>("DeductionID")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeeDeductionRefID")
                        .HasColumnType("int");

                    b.Property<short>("PayRunID")
                        .HasColumnType("smallint");

                    b.Property<short>("PlanYear")
                        .HasColumnType("smallint");

                    b.HasKey("ClientID", "EmployeeDeductionID", "EmployeeID");

                    b.HasIndex("DeductionID");

                    b.HasIndex("ClientID", "PayRunID", "PlanYear");

                    b.HasIndex("ClientID", "EmployeeDeductionRefID", "EmployeeID", "DeductionID");

                    b.ToTable("tbl_EmployeeDeduction", "pr");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeDeductionRef", b =>
                {
                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeeDeductionRefID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<short>("DeductionID")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("OvrdAltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OvrdLongDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OvrdShortDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClientID", "EmployeeDeductionRefID", "EmployeeID", "DeductionID");

                    b.HasIndex("DeductionID");

                    b.HasIndex("EmployeeID", "ClientID");

                    b.ToTable("tbl_EmployeeDeductionRef", "pr");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeEarning", b =>
                {
                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeeEarningID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<short>("EarningID")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeeEarningRefID")
                        .HasColumnType("int");

                    b.Property<short>("PayRunID")
                        .HasColumnType("smallint");

                    b.Property<short>("PlanYear")
                        .HasColumnType("smallint");

                    b.HasKey("ClientID", "EmployeeEarningID", "EmployeeID");

                    b.HasIndex("EarningID");

                    b.HasIndex("ClientID", "PayRunID", "PlanYear");

                    b.HasIndex("ClientID", "EmployeeEarningRefID", "EmployeeID", "EarningID");

                    b.ToTable("tbl_EmployeeEarning", "pr");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeEarningRef", b =>
                {
                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeeEarningRefID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<short>("EarningID")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("OvrdAltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OvrdLongDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OvrdShortDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClientID", "EmployeeEarningRefID", "EmployeeID", "EarningID");

                    b.HasIndex("EarningID");

                    b.HasIndex("EmployeeID", "ClientID");

                    b.ToTable("tbl_EmployeeEarningRef", "pr");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeLoan", b =>
                {
                    b.Property<int>("EmployeeLoanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeLoanRefID")
                        .HasColumnType("int");

                    b.Property<short>("LoanID")
                        .HasColumnType("smallint");

                    b.Property<short>("PayRunID")
                        .HasColumnType("smallint");

                    b.Property<short>("PlanYear")
                        .HasColumnType("smallint");

                    b.HasKey("EmployeeLoanID");

                    b.HasIndex("LoanID");

                    b.HasIndex("ClientID", "PayRunID", "PlanYear");

                    b.HasIndex("EmployeeLoanRefID", "EmployeeID", "ClientID", "LoanID");

                    b.ToTable("tbl_EmployeeLoan", "pr");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeLoanRef", b =>
                {
                    b.Property<int>("EmployeeLoanRefID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<short>("LoanID")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("GrantedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Interest")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<string>("OvrdAltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OvrdLongDesc")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OvrdShortDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PrincipalAmount")
                        .HasColumnType("DECIMAL(20,6)");

                    b.HasKey("EmployeeLoanRefID", "EmployeeID", "ClientID", "LoanID");

                    b.HasIndex("LoanID");

                    b.HasIndex("EmployeeID", "ClientID");

                    b.ToTable("tbl_EmployeeLoanRef", "pr");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeOvertime", b =>
                {
                    b.Property<int>("EmployeeOvertimeID")
                        .HasColumnType("int");

                    b.Property<short>("PlanYear")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<short>("OTRateID")
                        .HasColumnType("smallint");

                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Hours")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<short>("PayRunID")
                        .HasColumnType("smallint");

                    b.HasKey("EmployeeOvertimeID", "PlanYear", "EmployeeID", "OTRateID");

                    b.HasIndex("OTRateID");

                    b.HasIndex("EmployeeID", "ClientID");

                    b.HasIndex("ClientID", "PayRunID", "PlanYear");

                    b.ToTable("tbl_EmployeeOvertime", "pr");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("EventCode")
                        .HasColumnType("smallint");

                    b.Property<string>("LongDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tbl_Event", "pr");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.Job", b =>
                {
                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<short>("JobID")
                        .HasColumnType("smallint");

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TaskHandlerProviderID")
                        .HasColumnType("int");

                    b.HasKey("ClientID", "JobID");

                    b.HasIndex("TaskHandlerProviderID");

                    b.ToTable("tbl_Job", "dbo");

                    b.HasData(
                        new
                        {
                            ClientID = (short)1,
                            JobID = (short)100,
                            IsEnabled = true,
                            LongDesc = "Main Calc",
                            ShortDesc = "Main Calc",
                            TaskHandlerProviderID = 1000
                        },
                        new
                        {
                            ClientID = (short)1,
                            JobID = (short)404,
                            IsEnabled = true,
                            LongDesc = "Rollback Employee",
                            ShortDesc = "Rollback Employee",
                            TaskHandlerProviderID = 1001
                        },
                        new
                        {
                            ClientID = (short)1,
                            JobID = (short)700,
                            IsEnabled = true,
                            LongDesc = "Import Person Data",
                            ShortDesc = "Import Person Data",
                            TaskHandlerProviderID = 2000
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.JobParameter", b =>
                {
                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<short>("JobID")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.HasKey("ClientID", "JobID", "Name");

                    b.ToTable("tbl_JobParameter", "dbo");

                    b.HasData(
                        new
                        {
                            ClientID = (short)1,
                            JobID = (short)100,
                            Name = "PlanYear",
                            DataType = "short",
                            DefaultValue = "2020",
                            Display = "Plan Year",
                            IsRequired = true,
                            Order = (short)1
                        },
                        new
                        {
                            ClientID = (short)1,
                            JobID = (short)100,
                            Name = "PayRunID",
                            DataType = "short",
                            Display = "Pay Run ID",
                            IsRequired = true,
                            Order = (short)2
                        },
                        new
                        {
                            ClientID = (short)1,
                            JobID = (short)100,
                            Name = "PersonID",
                            DataType = "int",
                            Display = "Person ID",
                            IsRequired = false,
                            Order = (short)3
                        },
                        new
                        {
                            ClientID = (short)1,
                            JobID = (short)100,
                            Name = "SpecialGroupID",
                            DataType = "int",
                            Display = "Special Group ID",
                            IsRequired = false,
                            Order = (short)100
                        },
                        new
                        {
                            ClientID = (short)1,
                            JobID = (short)404,
                            Name = "EmployeeID",
                            DataType = "int",
                            Display = "Employee ID",
                            IsRequired = true,
                            Order = (short)0
                        },
                        new
                        {
                            ClientID = (short)1,
                            JobID = (short)700,
                            Name = "Path",
                            DataType = "string",
                            Display = "File Path",
                            IsRequired = true,
                            Order = (short)0
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.PayRun", b =>
                {
                    b.Property<short>("ClientID")
                        .HasColumnType("smallint");

                    b.Property<short>("PayRunID")
                        .HasColumnType("smallint");

                    b.Property<short>("PlanYear")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CutOffEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CutOffStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PayoutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientID", "PayRunID", "PlanYear");

                    b.HasIndex("PlanYear");

                    b.ToTable("tbl_PayRun", "pr");

                    b.HasData(
                        new
                        {
                            ClientID = (short)1,
                            PayRunID = (short)1,
                            PlanYear = (short)2021,
                            CutOffEnd = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CutOffStart = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayoutDate = new DateTime(2021, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeriodEnd = new DateTime(2021, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeriodStart = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ClientID = (short)1,
                            PayRunID = (short)2,
                            PlanYear = (short)2021,
                            CutOffEnd = new DateTime(2021, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CutOffStart = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayoutDate = new DateTime(2021, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeriodEnd = new DateTime(2021, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PeriodStart = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.PaymentMode", b =>
                {
                    b.Property<short>("PaymentModeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentModeID");

                    b.ToTable("tbl_PaymentMode", "pr");

                    b.HasData(
                        new
                        {
                            PaymentModeID = (short)1,
                            LongDesc = "Weekly",
                            ShortDesc = "Weekly"
                        },
                        new
                        {
                            PaymentModeID = (short)2,
                            LongDesc = "Bi-weekly",
                            ShortDesc = "Bi-weekly"
                        },
                        new
                        {
                            PaymentModeID = (short)3,
                            LongDesc = "Semi-Monthly",
                            ShortDesc = "Semi-Monthly"
                        },
                        new
                        {
                            PaymentModeID = (short)4,
                            LongDesc = "Monthly",
                            ShortDesc = "Monthly"
                        },
                        new
                        {
                            PaymentModeID = (short)5,
                            LongDesc = "Daily",
                            ShortDesc = "Daily"
                        },
                        new
                        {
                            PaymentModeID = (short)6,
                            LongDesc = "Annually",
                            ShortDesc = "Annually"
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.Period", b =>
                {
                    b.Property<short>("PeriodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsEveryPayroll")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeedPayoutPlace")
                        .HasColumnType("bit");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.Property<short>("PaymentModeID")
                        .HasColumnType("smallint");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PeriodID");

                    b.HasIndex("PaymentModeID");

                    b.ToTable("tbl_Period", "pr");

                    b.HasData(
                        new
                        {
                            PeriodID = (short)1,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = false,
                            LongDesc = "First Payroll",
                            Order = (short)1,
                            PaymentModeID = (short)2,
                            ShortDesc = "First Payroll"
                        },
                        new
                        {
                            PeriodID = (short)2,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = false,
                            LongDesc = "Third Payroll",
                            Order = (short)3,
                            PaymentModeID = (short)2,
                            ShortDesc = "Third Payroll"
                        },
                        new
                        {
                            PeriodID = (short)3,
                            IsEveryPayroll = true,
                            IsNeedPayoutPlace = false,
                            LongDesc = "Every Payroll",
                            Order = (short)4,
                            PaymentModeID = (short)2,
                            ShortDesc = "Every Payroll"
                        },
                        new
                        {
                            PeriodID = (short)4,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = false,
                            LongDesc = "Second Payroll",
                            Order = (short)2,
                            PaymentModeID = (short)2,
                            ShortDesc = "Second Payroll"
                        },
                        new
                        {
                            PeriodID = (short)5,
                            IsEveryPayroll = true,
                            IsNeedPayoutPlace = false,
                            LongDesc = "Every Payroll",
                            Order = (short)1,
                            PaymentModeID = (short)5,
                            ShortDesc = "Every Payroll"
                        },
                        new
                        {
                            PeriodID = (short)6,
                            IsEveryPayroll = true,
                            IsNeedPayoutPlace = false,
                            LongDesc = "Every Payroll",
                            Order = (short)1,
                            PaymentModeID = (short)4,
                            ShortDesc = "Every Payroll"
                        },
                        new
                        {
                            PeriodID = (short)7,
                            IsEveryPayroll = true,
                            IsNeedPayoutPlace = false,
                            LongDesc = "Every Payroll",
                            Order = (short)3,
                            PaymentModeID = (short)3,
                            ShortDesc = "Every Payroll"
                        },
                        new
                        {
                            PeriodID = (short)8,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = false,
                            LongDesc = "First Half",
                            Order = (short)1,
                            PaymentModeID = (short)3,
                            ShortDesc = "First Half"
                        },
                        new
                        {
                            PeriodID = (short)9,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = false,
                            LongDesc = "Second Half",
                            Order = (short)2,
                            PaymentModeID = (short)3,
                            ShortDesc = "Second Half"
                        },
                        new
                        {
                            PeriodID = (short)10,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = false,
                            LongDesc = "Fourth Week",
                            Order = (short)4,
                            PaymentModeID = (short)1,
                            ShortDesc = "Fourth Week"
                        },
                        new
                        {
                            PeriodID = (short)11,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = false,
                            LongDesc = "Fifth Week",
                            Order = (short)5,
                            PaymentModeID = (short)1,
                            ShortDesc = "Fifth Week"
                        },
                        new
                        {
                            PeriodID = (short)12,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = false,
                            LongDesc = "Second Week",
                            Order = (short)2,
                            PaymentModeID = (short)1,
                            ShortDesc = "Second Week"
                        },
                        new
                        {
                            PeriodID = (short)13,
                            IsEveryPayroll = true,
                            IsNeedPayoutPlace = false,
                            LongDesc = "Every Payroll",
                            Order = (short)6,
                            PaymentModeID = (short)1,
                            ShortDesc = "Every Payroll"
                        },
                        new
                        {
                            PeriodID = (short)14,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = false,
                            LongDesc = "Third Week",
                            Order = (short)3,
                            PaymentModeID = (short)1,
                            ShortDesc = "Third Week"
                        },
                        new
                        {
                            PeriodID = (short)15,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = false,
                            LongDesc = "First Week",
                            Order = (short)1,
                            PaymentModeID = (short)1,
                            ShortDesc = "First Week"
                        },
                        new
                        {
                            PeriodID = (short)16,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = true,
                            LongDesc = "January",
                            Order = (short)0,
                            PaymentModeID = (short)6,
                            ShortDesc = "January"
                        },
                        new
                        {
                            PeriodID = (short)17,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = true,
                            LongDesc = "February",
                            Order = (short)0,
                            PaymentModeID = (short)6,
                            ShortDesc = "February"
                        },
                        new
                        {
                            PeriodID = (short)18,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = true,
                            LongDesc = "March",
                            Order = (short)0,
                            PaymentModeID = (short)6,
                            ShortDesc = "March"
                        },
                        new
                        {
                            PeriodID = (short)19,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = true,
                            LongDesc = "April",
                            Order = (short)0,
                            PaymentModeID = (short)6,
                            ShortDesc = "April"
                        },
                        new
                        {
                            PeriodID = (short)20,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = true,
                            LongDesc = "May",
                            Order = (short)0,
                            PaymentModeID = (short)6,
                            ShortDesc = "May"
                        },
                        new
                        {
                            PeriodID = (short)21,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = true,
                            LongDesc = "June",
                            Order = (short)0,
                            PaymentModeID = (short)6,
                            ShortDesc = "June"
                        },
                        new
                        {
                            PeriodID = (short)22,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = true,
                            LongDesc = "July",
                            Order = (short)0,
                            PaymentModeID = (short)6,
                            ShortDesc = "July"
                        },
                        new
                        {
                            PeriodID = (short)23,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = true,
                            LongDesc = "August",
                            Order = (short)0,
                            PaymentModeID = (short)6,
                            ShortDesc = "August"
                        },
                        new
                        {
                            PeriodID = (short)24,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = true,
                            LongDesc = "September",
                            Order = (short)0,
                            PaymentModeID = (short)6,
                            ShortDesc = "September"
                        },
                        new
                        {
                            PeriodID = (short)25,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = true,
                            LongDesc = "October",
                            Order = (short)0,
                            PaymentModeID = (short)6,
                            ShortDesc = "October"
                        },
                        new
                        {
                            PeriodID = (short)26,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = true,
                            LongDesc = "November",
                            Order = (short)0,
                            PaymentModeID = (short)6,
                            ShortDesc = "November"
                        },
                        new
                        {
                            PeriodID = (short)27,
                            IsEveryPayroll = false,
                            IsNeedPayoutPlace = true,
                            LongDesc = "December",
                            Order = (short)0,
                            PaymentModeID = (short)6,
                            ShortDesc = "December"
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.PlanYear", b =>
                {
                    b.Property<short>("Year")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EffectivityEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectivityStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Year");

                    b.ToTable("tbl_PlanYear", "pr");

                    b.HasData(
                        new
                        {
                            Year = (short)2020,
                            EffectivityEnd = new DateTime(2020, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EffectivityStart = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true
                        },
                        new
                        {
                            Year = (short)2021,
                            EffectivityEnd = new DateTime(2021, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            EffectivityStart = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = false
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.Table", b =>
                {
                    b.Property<short>("TableID")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AltDesc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EffectiveEndOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TableID", "Code");

                    b.ToTable("tbl_Table", "pr");

                    b.HasData(
                        new
                        {
                            TableID = (short)1,
                            Code = "TaxTable",
                            EffectiveEndOn = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveStartOn = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LongDesc = "REVISED WITHHOLDING TAX TABLE",
                            ShortDesc = "REVISED WITHHOLDING TAX TABLE"
                        },
                        new
                        {
                            TableID = (short)2,
                            Code = "PhilHealth",
                            EffectiveEndOn = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveStartOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LongDesc = "PhilHealth",
                            Reference = "https://www.philhealth.gov.ph/circulars/2019/circ2019-0009.pdf",
                            ShortDesc = "PhilHealth"
                        },
                        new
                        {
                            TableID = (short)3,
                            Code = "PhilHealth",
                            EffectiveEndOn = new DateTime(2021, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveStartOn = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LongDesc = "PhilHealth",
                            Reference = "https://www.philhealth.gov.ph/circulars/2020/circ2020-0005.pdf",
                            ShortDesc = "PhilHealth"
                        },
                        new
                        {
                            TableID = (short)4,
                            Code = "SSS",
                            EffectiveEndOn = new DateTime(2021, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveStartOn = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LongDesc = "PhilHSSSealth",
                            Reference = "https://www.sss.gov.ph/sss/DownloadContent?fileName=2021-CONTRIBUTION-SCHEDULE.pdf",
                            ShortDesc = "SSS"
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.TableRange", b =>
                {
                    b.Property<short>("TableRangeID")
                        .HasColumnType("smallint");

                    b.Property<short>("TableID")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AmountBasis")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("Custom1")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("Custom2")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("Custom3")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("Custom4")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("Custom5")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<string>("EmployeeFormula")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmployerFormula")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Fixed")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal>("Max")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal>("Min")
                        .HasColumnType("DECIMAL(20,6)");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("DECIMAL(20,6)");

                    b.HasKey("TableRangeID", "TableID", "Code");

                    b.HasIndex("TableID", "Code");

                    b.ToTable("tbl_TableRange", "pr");

                    b.HasData(
                        new
                        {
                            TableRangeID = (short)1,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Daily",
                            Fixed = 0m,
                            Max = 685m,
                            Min = 0.0000001m,
                            Rate = 0m
                        },
                        new
                        {
                            TableRangeID = (short)2,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Daily",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)3,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Daily",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)4,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Daily",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)5,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Daily",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)6,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Daily",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)7,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Weekly",
                            Fixed = 0m,
                            Max = 685m,
                            Min = 0.0000001m,
                            Rate = 0m
                        },
                        new
                        {
                            TableRangeID = (short)8,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Weekly",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)9,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Weekly",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)10,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Weekly",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)11,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Weekly",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)12,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Weekly",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)13,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "SemiMontly",
                            Fixed = 0m,
                            Max = 685m,
                            Min = 0.0000001m,
                            Rate = 0m
                        },
                        new
                        {
                            TableRangeID = (short)14,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "SemiMontly",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)15,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "SemiMontly",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)16,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "SemiMontly",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)17,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "SemiMontly",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)18,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "SemiMontly",
                            Fixed = 0m,
                            Max = 1095m,
                            Min = 685.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)19,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Monthly",
                            Fixed = 0m,
                            Max = 20833m,
                            Min = 0.0000001m,
                            Rate = 0m
                        },
                        new
                        {
                            TableRangeID = (short)20,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Monthly",
                            Fixed = 0m,
                            Max = 33332m,
                            Min = 20833.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)21,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Monthly",
                            Fixed = 2500m,
                            Max = 66666m,
                            Min = 33332.000001m,
                            Rate = 0.2m
                        },
                        new
                        {
                            TableRangeID = (short)22,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Monthly",
                            Fixed = 10833.33m,
                            Max = 166666.9999999m,
                            Min = 66667m,
                            Rate = 0.3m
                        },
                        new
                        {
                            TableRangeID = (short)23,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Monthly",
                            Fixed = 40833.33m,
                            Max = 666666.999999m,
                            Min = 166666m,
                            Rate = 0.32m
                        },
                        new
                        {
                            TableRangeID = (short)24,
                            TableID = (short)1,
                            Code = "TaxTable",
                            AmountBasis = "Monthly",
                            Fixed = 200833.33m,
                            Max = 999999999m,
                            Min = 666667m,
                            Rate = 0.35m
                        },
                        new
                        {
                            TableRangeID = (short)25,
                            TableID = (short)2,
                            Code = "PhilHealth",
                            AmountBasis = "Monthly",
                            EmployeeFormula = "{Fixed} / 2",
                            EmployerFormula = "{Fixed} / 2",
                            Fixed = 275m,
                            Max = 10000m,
                            Min = 0.0001m
                        },
                        new
                        {
                            TableRangeID = (short)26,
                            TableID = (short)2,
                            Code = "PhilHealth",
                            AmountBasis = "Monthly",
                            EmployeeFormula = "({MonthlyBasicPay} * {Rate}) / 2",
                            EmployerFormula = "({MonthlyBasicPay} * {Rate}) / 2",
                            Max = 59999.99m,
                            Min = 10000.01m,
                            Rate = 0.03m
                        },
                        new
                        {
                            TableRangeID = (short)27,
                            TableID = (short)2,
                            Code = "PhilHealth",
                            AmountBasis = "Monthly",
                            EmployeeFormula = "{Fixed} / 2",
                            EmployerFormula = "{Fixed} / 2",
                            Fixed = 1800m,
                            Max = 99999999.99m,
                            Min = 60000m
                        },
                        new
                        {
                            TableRangeID = (short)28,
                            TableID = (short)3,
                            Code = "PhilHealth",
                            AmountBasis = "Monthly",
                            EmployeeFormula = "{Fixed} / 2",
                            EmployerFormula = "{Fixed} / 2",
                            Fixed = 350m,
                            Max = 10000m,
                            Min = 0.0001m
                        },
                        new
                        {
                            TableRangeID = (short)29,
                            TableID = (short)3,
                            Code = "PhilHealth",
                            AmountBasis = "Monthly",
                            EmployeeFormula = "({MonthlyBasicPay} * {Rate}) / 2",
                            EmployerFormula = "({MonthlyBasicPay} * {Rate}) / 2",
                            Max = 69999.99m,
                            Min = 10000.01m,
                            Rate = 0.035m
                        },
                        new
                        {
                            TableRangeID = (short)30,
                            TableID = (short)3,
                            Code = "PhilHealth",
                            AmountBasis = "Monthly",
                            EmployeeFormula = "{Fixed} / 2",
                            EmployerFormula = "{Fixed} / 2",
                            Fixed = 2450m,
                            Max = 99999999.99m,
                            Min = 70000m
                        },
                        new
                        {
                            TableRangeID = (short)31,
                            TableID = (short)4,
                            Code = "SSS",
                            AmountBasis = "Monthly",
                            EmployeeFormula = "135.00",
                            EmployerFormula = "255.00",
                            Fixed = 3000m,
                            Max = 3250m,
                            Min = 0.0001m
                        },
                        new
                        {
                            TableRangeID = (short)32,
                            TableID = (short)4,
                            Code = "SSS",
                            AmountBasis = "Monthly",
                            EmployeeFormula = "1700.00",
                            EmployerFormula = "900.00",
                            Fixed = 20000m,
                            Max = 9999999999m,
                            Min = 24750m
                        });
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Staging.BatchFile", b =>
                {
                    b.Property<int>("FileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileID");

                    b.ToTable("tbl_BatchFile", "dbo");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Staging.StagingPerson", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeSysID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Err_ColumnIndex")
                        .HasColumnType("int");

                    b.Property<string>("Err_UnmappedRow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Err_Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<bool>("ImportIsValid")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("LoadStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessInstanceID")
                        .HasColumnType("int");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<string>("TaxIdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ValidationIsValid")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ProcessInstanceID");

                    b.ToTable("tbl_StagingPerson", "stg");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Staging.ValidationFailure", b =>
                {
                    b.Property<long>("ValidationFailureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("ProcessInstanceID")
                        .HasColumnType("int");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("RowIndex")
                        .HasColumnType("bigint");

                    b.HasKey("ValidationFailureID");

                    b.ToTable("tbl_ValidationFailure", "stg");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.MasterEmployee", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.Employee", "N_Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Parameters.PayRun", "N_PayRun")
                        .WithMany()
                        .HasForeignKey("ClientID", "PayRunID", "PlanYear")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("N_Employee");

                    b.Navigation("N_PayRun");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.MasterEmployeeDeduction", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.Deduction", "N_Deduction")
                        .WithMany()
                        .HasForeignKey("DeductionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Parameters.PayRun", "N_PayRun")
                        .WithMany()
                        .HasForeignKey("ClientID", "PayRunID", "PlanYear")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.CalcData.MasterEmployee", null)
                        .WithMany("N_MasterEmployeeDeductions")
                        .HasForeignKey("EmployeeID", "ClientID", "CalcID", "PlanYear", "PayRunID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_Deduction");

                    b.Navigation("N_PayRun");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.MasterEmployeeEarning", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.Earning", "N_Earning")
                        .WithMany()
                        .HasForeignKey("EarningID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Parameters.PayRun", "N_PayRun")
                        .WithMany()
                        .HasForeignKey("ClientID", "PayRunID", "PlanYear")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.CalcData.MasterEmployee", null)
                        .WithMany("N_MasterEmployeeEarnings")
                        .HasForeignKey("EmployeeID", "ClientID", "CalcID", "PlanYear", "PayRunID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_Earning");

                    b.Navigation("N_PayRun");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.MasterEmployeeLoan", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.Loan", "N_Loan")
                        .WithMany()
                        .HasForeignKey("LoanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Parameters.PayRun", "N_PayRun")
                        .WithMany()
                        .HasForeignKey("ClientID", "PayRunID", "PlanYear")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.CalcData.MasterEmployee", null)
                        .WithMany("N_MasterEmployeeLoans")
                        .HasForeignKey("EmployeeID", "ClientID", "CalcID", "PlanYear", "PayRunID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_Loan");

                    b.Navigation("N_PayRun");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.SpecialGroupMember", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.CalcData.SpecialGroup", null)
                        .WithMany("Members")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Batch", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Staging.BatchFile", "N_File")
                        .WithMany()
                        .HasForeignKey("N_FileFileID");

                    b.Navigation("N_File");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Deduction", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.DeductionType", "N_DeductionType")
                        .WithMany()
                        .HasForeignKey("DeductionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Common.TaskHandlerProvider", "N_TaskHandlerProvider")
                        .WithMany()
                        .HasForeignKey("TaskHandlerProviderID");

                    b.Navigation("N_DeductionType");

                    b.Navigation("N_TaskHandlerProvider");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Earning", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.EarningType", "N_EarningType")
                        .WithMany()
                        .HasForeignKey("EarningTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Common.TaskHandlerProvider", "N_TaskHandlerProvider")
                        .WithMany()
                        .HasForeignKey("TaskHandlerProviderID");

                    b.Navigation("N_EarningType");

                    b.Navigation("N_TaskHandlerProvider");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Employee", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.Client", "N_Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Common.Person", "N_Person")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_Client");

                    b.Navigation("N_Person");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Loan", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.LoanType", "N_LoanType")
                        .WithMany()
                        .HasForeignKey("LoanTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Common.TaskHandlerProvider", "N_TaskHandlerProvider")
                        .WithMany()
                        .HasForeignKey("TaskHandlerProviderID");

                    b.Navigation("N_LoanType");

                    b.Navigation("N_TaskHandlerProvider");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.OTRate", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.OTRateType", "N_OTRateType")
                        .WithMany()
                        .HasForeignKey("OTRateTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_OTRateType");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.ProcessInstance", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Parameters.Job", "N_Job")
                        .WithMany()
                        .HasForeignKey("ClientID", "JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_Job");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.ProcessInstanceError", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.ProcessInstance", null)
                        .WithMany("N_InstanceErrors")
                        .HasForeignKey("ProcessInstanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.ProcessInstanceMessage", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.ProcessInstance", null)
                        .WithMany("N_InstanceMessages")
                        .HasForeignKey("ProcessInstanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.ProcessInstanceParameter", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.ProcessInstance", null)
                        .WithMany("N_InstanceParameters")
                        .HasForeignKey("ProcessInstanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.BasicPay", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Parameters.Period", "N_PeriodEnd")
                        .WithMany()
                        .HasForeignKey("PeriodEndID");

                    b.HasOne("Aerish.Domain.Entities.Parameters.Period", "N_PeriodStart")
                        .WithMany()
                        .HasForeignKey("PeriodStartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Common.Employee", "N_Employee")
                        .WithMany("N_BasicPays")
                        .HasForeignKey("EmployeeID", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_Employee");

                    b.Navigation("N_PeriodEnd");

                    b.Navigation("N_PeriodStart");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeDeduction", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.Deduction", null)
                        .WithMany()
                        .HasForeignKey("DeductionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Parameters.PayRun", null)
                        .WithMany()
                        .HasForeignKey("ClientID", "PayRunID", "PlanYear")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Parameters.EmployeeDeductionRef", null)
                        .WithMany("N_EmployeeDeductions")
                        .HasForeignKey("ClientID", "EmployeeDeductionRefID", "EmployeeID", "DeductionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeDeductionRef", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.Deduction", "N_Deduction")
                        .WithMany()
                        .HasForeignKey("DeductionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Common.Employee", "N_Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_Deduction");

                    b.Navigation("N_Employee");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeEarning", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.Earning", null)
                        .WithMany()
                        .HasForeignKey("EarningID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Parameters.PayRun", null)
                        .WithMany()
                        .HasForeignKey("ClientID", "PayRunID", "PlanYear")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Parameters.EmployeeEarningRef", null)
                        .WithMany("N_EmployeeEarnings")
                        .HasForeignKey("ClientID", "EmployeeEarningRefID", "EmployeeID", "EarningID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeEarningRef", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.Earning", "N_Earning")
                        .WithMany()
                        .HasForeignKey("EarningID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Common.Employee", "N_Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_Earning");

                    b.Navigation("N_Employee");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeLoan", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.Loan", null)
                        .WithMany()
                        .HasForeignKey("LoanID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Parameters.PayRun", null)
                        .WithMany()
                        .HasForeignKey("ClientID", "PayRunID", "PlanYear")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Parameters.EmployeeLoanRef", "N_EmployeeLoanRef")
                        .WithMany("N_EmployeeLoans")
                        .HasForeignKey("EmployeeLoanRefID", "EmployeeID", "ClientID", "LoanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_EmployeeLoanRef");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeLoanRef", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.Loan", "N_Loan")
                        .WithMany()
                        .HasForeignKey("LoanID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Common.Employee", "N_Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_Employee");

                    b.Navigation("N_Loan");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeOvertime", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.OTRate", "N_OTRate")
                        .WithMany()
                        .HasForeignKey("OTRateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Common.Employee", "N_Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Parameters.PayRun", "N_PayRun")
                        .WithMany()
                        .HasForeignKey("ClientID", "PayRunID", "PlanYear")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("N_Employee");

                    b.Navigation("N_OTRate");

                    b.Navigation("N_PayRun");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.Job", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.TaskHandlerProvider", "N_TaskHandlerProvider")
                        .WithMany()
                        .HasForeignKey("TaskHandlerProviderID");

                    b.Navigation("N_TaskHandlerProvider");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.JobParameter", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Parameters.Job", null)
                        .WithMany("N_JobParameters")
                        .HasForeignKey("ClientID", "JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.PayRun", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aerish.Domain.Entities.Parameters.PlanYear", "N_PlanYear")
                        .WithMany()
                        .HasForeignKey("PlanYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_PlanYear");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.Period", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Parameters.PaymentMode", "N_PaymentMode")
                        .WithMany()
                        .HasForeignKey("PaymentModeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_PaymentMode");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.TableRange", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Parameters.Table", null)
                        .WithMany("N_Ranges")
                        .HasForeignKey("TableID", "Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Staging.StagingPerson", b =>
                {
                    b.HasOne("Aerish.Domain.Entities.Common.ProcessInstance", "N_JobInstance")
                        .WithMany()
                        .HasForeignKey("ProcessInstanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("N_JobInstance");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.MasterEmployee", b =>
                {
                    b.Navigation("N_MasterEmployeeDeductions");

                    b.Navigation("N_MasterEmployeeEarnings");

                    b.Navigation("N_MasterEmployeeLoans");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.CalcData.SpecialGroup", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.Employee", b =>
                {
                    b.Navigation("N_BasicPays");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Common.ProcessInstance", b =>
                {
                    b.Navigation("N_InstanceErrors");

                    b.Navigation("N_InstanceMessages");

                    b.Navigation("N_InstanceParameters");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeDeductionRef", b =>
                {
                    b.Navigation("N_EmployeeDeductions");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeEarningRef", b =>
                {
                    b.Navigation("N_EmployeeEarnings");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.EmployeeLoanRef", b =>
                {
                    b.Navigation("N_EmployeeLoans");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.Job", b =>
                {
                    b.Navigation("N_JobParameters");
                });

            modelBuilder.Entity("Aerish.Domain.Entities.Parameters.Table", b =>
                {
                    b.Navigation("N_Ranges");
                });
#pragma warning restore 612, 618
        }
    }
}
